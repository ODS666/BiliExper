# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
@@ -1,9 +1,9 @@
# -*- coding: utf-8 -*-
import asyncio, time, logging, sys, io, os
import encodings.idna
import random, argparse, datetime
from importlib import import_module
from collections import OrderedDict
from getopt import getopt
from BiliClient import asyncbili


@@ -135,42 +135,116 @@ async def run_user_tasks(user: dict,           #用户配置
        if task_array:
            await asyncio.wait(task_array)        #异步等待所有任务完成

def main(*args, **kwargs):

def main(args):
    try:
        configData = load_config(kwargs.get("config", None))
        configData = load_config(args.configfile)
    except Exception as e:
        print(f'配置加载异常，原因为{str(e)}，退出程序')
        sys.exit(6)

    if 'log' in kwargs:
        configData["log_file"] = kwargs["log"]
    if args.logfile:
        configData["log_file"] = args.logfile

    init_message(configData) #初始化消息推送

    if "looping" not in configData:
        configData["looping"] = None
    if "random" not in configData:
        configData["random"] = None
    if "timing" not in configData:
        configData["timing"] = []

    for i in range(len(configData["timing"])):
        configData["timing"][i]=datetime.time.fromisoformat(configData["timing"][i])

    looping = args.looping or configData["looping"]
    timing = args.timing or configData["timing"]
    random_max = args.random or configData["random"]
    #启动任务
    loop = asyncio.get_event_loop()
    loop.run_until_complete(loop.create_task(start(configData)))
    if looping:
        while True:
            task=loop.create_task(start(configData))
            loop.run_until_complete(task)
            time.sleep(looping)
            if random_max:
                random_time = random.randint(1, random_max)
                logging.info(f'随机延时{random_time}s')
                time.sleep(random_time)
    elif timing:
        while True:
            now = datetime.datetime.now().time().replace(microsecond=0)
            if now in timing: # 此处为设置的每天定时的时间
                if random_max:
                    random_time = random.randint(1, random_max)
                    logging.info(f'随机延时{random_time}s')
                    time.sleep(random_time)
                task=loop.create_task(start(configData))
                loop.run_until_complete(task)
                time.sleep(2)
    else:
        if random_max:
            random_time = random.randint(1, random_max)
            logging.info(f'随机延时{random_time}s')
            time.sleep(random_time)
        task=loop.create_task(start(configData))
        loop.run_until_complete(task)


if __name__=="__main__":
    kwargs = {}
    opts, args = getopt(sys.argv[1:], "hvc:l:",["configfile=","logfile="])
    for opt, arg in opts:
        if opt in ('-c','--configfile'):
            kwargs["config"] = arg
        elif opt in ('-l','--logfile'):
            kwargs["log"] = arg
        elif opt == '-h':
            print('BliExp -c <configfile> -l <logfile>')
            sys.exit()
        elif opt == '-v':
            print(f'BiliExp v{main_version_str}')
            sys.exit()
while True: #死循环 每一个小时运行一次配置
    main(**kwargs)
    time.sleep(3600)

# while True: #每天某个时间段运行配置
#     time_now = time.strftime("%H:%M:%S", time.localtime()) # 刷新
#     if time_now == "11:30:00": #此处设置每天定时的时间
#         main(**kwargs)
#         time.sleep(2) # 因为以秒定时，所以暂停2秒，使之不会在1秒内执行多次 
    parser = argparse.ArgumentParser(
        prog="BiliExper",
        description='哔哩哔哩助手',
        epilog="注意：random参数不能大于looping参数，也不能大于多个tm参数间的时间间隔\n",
        add_help=False
    )
    parser.add_argument(
        '-h', '--help',
        action='help',
        help='帮助'
    )

    parser.add_argument(
        '-c', '--configfile',
        dest='configfile',
        help='配置文件路径'
    )
    parser.add_argument(
        '-l', '--logfile',
        dest='logfile',
        help='日志文件路径'
    )
    parser.add_argument(
        '-r', '--random',
        dest='random',
        type=int,
        nargs='?',
        const=300,
        help='随机延时范围，单位为秒，默认值为300'
    )
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        '-lo','--looping',
        dest='looping',
        type=int,
        nargs='?',
        const=3600*24,
        help='循环运行间隔，使用此参数将开启循环运行，参数单位为秒（s），默认值为86400。与timing参数互斥'
    )
    group.add_argument(
        '-tm','--timing',
        dest='timing',
        action='append',
        type=datetime.time.fromisoformat,
        help='指定时间执行,如11:30:00，可以多次使用，如"-tm 11:30:00 -tm 16:00:00"。与looping参数互斥'
    )
    parser.add_argument(
        '-v','--version',
        action='version',
        version='%(prog)s {version}'.format(version=main_version_str),
        help="版本号"
    )

    args = parser.parse_args()
main(args)
